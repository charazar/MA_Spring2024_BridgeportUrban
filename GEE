// Urban Heat Land Surface Temperature Analysis
// Author: Dr. Kenton Ross 
// Adapted by Spring 2024 Bridgeport Urban Development team
//
// Analyzes the difference in land surface temperature between a study area and a reference area 
// for a study period. In this project, the study area is Fairfield County, CT. The reference area
// is the town of Fairfield, just next to Bridgeport which is the focus of the project. The study 
// period is the summer months (June 01 to September 31) from 2013 to 2023. Images for this period
// are taken from Landsat 8 & 9 and merged into one image collection. The median of this image 
// collection is found for each pixel and band. Then a spatial reducer is used to find the median 
// surface temperature for the reference area. This value is subtracted from every pixel in the
// entire study area to obtain a difference-LST image. Shapefiles are imported from assets in GEE.

// Import shapefile assests
var fairfield_county = ee.FeatureCollection("projects/ee-jdhocknell/assets/fairfieldcounty_ESPG4326");
var fairfield_town = ee.FeatureCollection("projects/ee-jdhocknell/assets/fairfieldcity_waterclip_ESPG4326");
var bridgeport = ee.FeatureCollection("projects/ee-jdhocknell/assets/bridgeport_waterclip_ESPG4326");

// Establish study and reference areas using imported assest shapefiles
var studyArea = fairfield_county;
var refArea = fairfield_town;

// Set parameter limits
var maxTemp = 40.0;
var minTemp = 10.0;
var maxCount = 30;
var minCount = 0;

// Establish Landsat surface temperature collection
// Project study period: 2013 - 2023 for June 01 - September 30
var dataset1 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2013-06-01', '2013-09-30');
var dataset2 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2014-06-01', '2014-09-30');
var dataset3 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2015-06-01', '2015-09-30');
var dataset4 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2016-06-01', '2016-09-30');
var dataset5 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2017-06-01', '2017-09-30');
var dataset6 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2018-06-01', '2018-09-30');
var dataset7 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2019-06-01', '2019-09-30');
var dataset8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2020-06-01', '2020-09-30');
var dataset9 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterDate('2021-06-01', '2021-09-30');      
var dataset10 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2').filterDate('2022-06-01', '2022-09-30');
var dataset11 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2').filterDate('2023-06-01', '2023-09-30');
var dataset = dataset1.merge(dataset2)
                      .merge(dataset3)
                      .merge(dataset4)
                      .merge(dataset5)
                      .merge(dataset6)
                      .merge(dataset7)
                      .merge(dataset8)
                      .merge(dataset9)
                      .merge(dataset10)
                      .merge(dataset11)
                      .filterBounds(studyArea);
                      
// Print the image collection which shows the number of images merged
print('2013-2023 June-September image collection (# imgs): ', dataset);

// =================================================================================================
// Functions
// =================================================================================================

// Helper function to extract the values from specific bits
// The input parameter can be a ee.Number() or ee.Image()
// Code adapted from https://gis.stackexchange.com/a/349401/5160
var bitwiseExtract = function(input, fromBit, toBit) {
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit);
  var mask = ee.Number(1).leftShift(maskSize).subtract(1);
  return input.rightShift(fromBit).bitwiseAnd(mask);
};

// Function that clips image layers to geometry
function clipGeo(image) {
  return image.clip(studyArea);
}

// Function that applies image pre-processing.
function applyScaleFactorsAndMask(image) {
  // Scale Factors
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  // original offset +149 for Kelvin, second offset -273.15 converts to Celsius
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0).add(-273.15);
  
  // Masking
  // Masking approach from https://spatialthoughts.com/2021/08/19/qa-bands-bitmasks-gee/
  var qaBand = image.select('QA_PIXEL');
  // Check QA for Fill
  //var fillMask = bitwiseExtract(qaBand, 0, 0).eq(0);
  // Check QA for DilatedCloud
  var cloudMask = bitwiseExtract(qaBand, 3, 3).eq(0);
  // Check QA for Shadow
  var shadowMask = bitwiseExtract(qaBand, 4, 4).eq(0);
  // Combine all the masks
  var qaMask = cloudMask.rename('VALID_PIXELS');
  image = image.updateMask(qaMask);
  
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true)
              .addBands(qaMask, null, true);
}

// function that mosaics by date -- see url, second solution
// (https://gis.stackexchange.com/questions/280156/mosaicking-image-collection-by-date-day-in-google-earth-engine)
function mosaicByDate(imcol){
  // imcol: An image collection
  // returns: An image collection
  var imlist = imcol.toList(imcol.size());

  var unique_dates = imlist.map(function(im){
    return ee.Image(im).date().format("YYYY-MM-dd");
  }).distinct();

  var mosaic_imlist = unique_dates.map(function(d){
    d = ee.Date(d);

    var im = imcol
      .filterDate(d, d.advance(1, "day"))
      .mosaic();

    return im.set(
        "system:time_start", d.millis(), 
        "system:id", d.format("YYYY-MM-dd"));
  });

  return ee.ImageCollection(mosaic_imlist);
}

// ======================================================================================
// Main
// ======================================================================================
dataset = dataset.map(clipGeo);                   // clip Landsat imgs by study area
dataset = dataset.map(applyScaleFactorsAndMask);
var datemosaic_set = mosaicByDate(dataset);
// Print the image collection and show the updated number of images after pre-processing        
print('datemosaic_set:', datemosaic_set);


// Create temperature palette and legend
var palette = ["blue", "yellow", "red"];
var vis = {min: minTemp, max: maxTemp, palette: palette};

var nSteps = 10;
// Creates a color bar thumbnail image for use in legend from the given color palette
function makeColorBarParams(palette) {
  return {
    bbox: [0, 0, nSteps, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: nSteps,
    palette: palette,
  };
}

/*
// Create the colour bar for the legend
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0).int(),
  params: makeColorBarParams(vis.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
});

// Create a panel with three numbers for the legend
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(vis.min, {margin: '4px 8px'}),
    ui.Label(
        ((vis.max-vis.min) / 2+vis.min),
        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(vis.max, {margin: '4px 8px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});

// Legend title
var legendTitle = ui.Label({
  value: 'Temperature (C)',
  style: {fontWeight: 'bold'}
});

// Add the legendPanel to the map
var legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);
Map.add(legendPanel);
*/

// Create count palette and legend
var countPalette = ["green", "yellow", "purple"];
var vis2 = {min: minCount, max: maxCount, palette: countPalette};

/*
// Create the colour bar for the legend
var colorBar2 = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0).int(),
  params: makeColorBarParams(vis2.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
});

// Create a panel with three numbers for the legend
var legendLabels2 = ui.Panel({
  widgets: [
    ui.Label(vis2.min, {margin: '4px 8px'}),
    ui.Label(
        ((vis2.max-vis2.min) / 2+vis2.min),
        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(vis2.max, {margin: '4px 8px'})
 ],
  layout: ui.Panel.Layout.flow('horizontal')
});

// Legend title
var legendTitle2 = ui.Label({
  value: 'Count',
  style: {fontWeight: 'bold'}
});

// Add the legendPanel2 to the map
var legendPanel2 = ui.Panel([legendTitle2, colorBar2, legendLabels2]);
Map.add(legendPanel2);
*/

var visualization = {
  bands: ['ST_B10'],
  min: minTemp,
  max: maxTemp,
  palette: palette,
};

var visualize_valid_pixels = {
  bands: ['VALID_PIXELS'],
  min: minCount,
  max: maxCount,
  palette: countPalette,
};

// Insert longitude and latitude for project
Map.setCenter(-73.17991, 41.18947, 11);

// Map the study and reference areas
Map.addLayer(studyArea, {}, 'AOI Area', false);
Map.addLayer(refArea, {}, 'Reference Area', false);

// Map the number of acquisitions for the study area image collection (ideally 30) 
Map.addLayer(datemosaic_set.sum(), visualize_valid_pixels, "Study Area Number Acquisitions", false);

// Create a new variable with the median of each band in the study area image collection
var medianST_studyArea = datemosaic_set.median();
print('medianST_studyArea:', medianST_studyArea);
Map.addLayer(medianST_studyArea, visualization, 'Study Area Median Surface Temperature', false);

// Create a new image collection by filtering datemosaic for the reference area
var refArea_imgcol = datemosaic_set
  .filterBounds(refArea)
  .map(function(image){return image.clip(refArea)});
//print("refArea_imgcol:", refArea_imgcol);

// Map the number of acquisitions for the reference area image collection (ideally 30) 
Map.addLayer(refArea_imgcol.sum(), visualize_valid_pixels, "Reference Area Number Aquisitions", false);

// Create a new variable with the median of each band in the reference area image collection
var medianST_refArea = refArea_imgcol.median();
print('medianST_refArea:', medianST_refArea);
Map.addLayer(medianST_refArea, visualization, 'Reference Area Median Surface Temperature', false);

// =================================================================================================
// Spatial reducer
// =================================================================================================
// select only the surface temperature band from the image collection mosaic
var medianSTreduced_refArea = medianST_refArea.select('ST_B10');
print('medianSTreduced select ST_B10 for reference area:', medianSTreduced_refArea);

medianSTreduced_refArea = medianSTreduced_refArea.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: refArea,
  scale: 30,  // same as landsat grid spacing
});
print('median surface temperature for reference area:', medianSTreduced_refArea);

// Uncomment this code if you're interested in the median ST for the entire study area
/*
var medianSTreduced_studyArea = medianST_studyArea.select('ST_B10');
print('medianSTreduced select ST_B10 for study area:', medianSTreduced_studyArea)
;
// use a spatial reducer to find the median surface temperature for the aoi
medianSTreduced_studyArea = medianSTreduced_studyArea.reduceRegion({
  reducer: ee.Reducer.median(),
  geometry: studyArea,
  scale: 30,  // same as landsat grid spacing
});
print('median surface temperature for study area:', medianSTreduced_studyArea);
*/
// ======================================================================================

// Create a difference image by subtracting the median ST for the reference area from
// every pixel in the study area image
var refMedian = ee.Number(medianSTreduced_refArea.get('ST_B10'));
print("refMedian", refMedian);
var diff_img = medianST_studyArea.select('ST_B10').subtract(refMedian);
print("diff_img:", diff_img);
Map.addLayer(
  diff_img, {
  bands: ['ST_B10'],
  min: -10, // Choose appropriate min/max values to display the map
  max: 25,
  palette: palette,},
  'Difference Image', true);

// Export the image to your Google Drive. Go to the 'Taks' tab in the upper left and run the
// unsubmitted task named LST_difference.
Export.image.toDrive({
  image: diff_img,
  description: 'LST_difference',
  region: studyArea,
  scale: 30,
  crs: 'EPSG: 4326',
  maxPixels: 1e9
});
