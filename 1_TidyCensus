########################################################################
#                                   ROUTINE 
#                   MA_Bridgeport_UDII_Spring2024_Tidycensus
#-----------------------------------------------------------------------
#
# Description: This first part of this routine extracts and processes socio-economic 
#             variables from American Census Survey (ACS) by census tract or block group for
#             the city of Tempe and saves them to a csv file. The variables produced
#             match those included from previous literature.  
#             Finally the data set are merged and saved in a common csv file.
#             
#             Users can define year, census type, working directory, and geography. 
#             
#             NOTE: the code take ~10 minutes to run 
# Code Requirements: This script requires installation of "tidyverse","tidycensus","foreign","sf" 
#                    See the Setup libraries section for more info.
#
# Created by: Lance Watkins, Ph.D. School of Geographical Sciences and Urban Planning
#             Arizona State University
#
# Modified by: Blake A Steiner
# Date created: Oct. 15, 2020
# History:  
#           Oct. 15, 2020 - bas - created to extract census data from tidy census
#           Oct. 22, 2020 - bas - modified code to fit context of Tempe
#           Oct. 29, 2020 - bas - Reran code for testing and edited it
########################################################################

############################
#Setup libraries 
############################


# Retrieve your personal API key from 
# http://api.census.gov/data/key_signup.html

#specify the packages of interest
packages = c("tidyverse","tidycensus","foreign","sf")

### Run this if these packages are not installed on the computer
install.packages(c("tidyverse","tidycensus","foreign","sf"))

#Activate the packages
library("tidyverse")
library("tidycensus")
library("foreign")
library("sf") #In case you want to map variables in R
library("dplyr")
library(tigris)
options(tigris_use_cache = TRUE)


############################
# TIPS
############################


## Additional Links for working with tidy census and census data in R

#Using tidycensus: https://walkerke.github.io/tidycensus/articles/basic-usage.html#geography-in-tidycensus
# 1) https://www.census.gov/programs-surveys/acs/technical-documentation/code-lists.html 
# 1a) Instructions on calculating margin of error for ACS variables that were calculated from existing ACS variables, 
# 1a) follow link under "Instructions for Applying Statistical Testing"
# 2) Census Data Explorer: https://data.census.gov/cedsci/?q=United%20States
# 2a) You can use this to explore the census data through and API. It can be useful reference when working with tidy census



############################
# Set your environment
############################

#Insert your key here
api_key <- "c1d45bf98424ad91c28368a363dd79953ef52a85" #My API Key
census_api_key(api_key, install = TRUE, overwrite = TRUE)

readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")

#Geography type, choose between "tract" or "block group"
acs_geography <- "block group" 

#census year or acs year
year <- 2021 

#what type of data you want to pull, see ?load_variables for more info
type <- "acs5"


# Load variables for ACS 5-year estimates ending in 2021
acs_variables <- load_variables(2021, "acs5")



#Set your working directory
setwd("C:/Users/charc/OneDrive/Desktop/PCABridgeport/BridgeportPCA2")


#Pull region in question boundaries (tracts or blocks)
region_bg_ID_old <- as.character(read.dbf("2021_BG_data/tl_2021_09_bg.dbf")$GEOID)
region_bg_ID <- as.character(read.dbf("BP_GEOID_BLKGRPS.dbf")$GEOID)


#Creating a new data frame that will serve as the data frame to store subset data and ACS variables
output.df <- as.data.frame(region_bg_ID)
colnames(output.df) <- "GEOID"
output.df.old <- as.data.frame(region_bg_ID_old)
colnames(output.df.old) <- "GEOID"

#Filter variables to your GEOIDs
output.df.fipsedited <- data.frame(
  GEOID = c(str_replace(output.df$GEOID, "120", "001")))


############################
# Data time!
############################

v18 <- load_variables(2021, #Year or ending year of 5 year ACS
                      'acs5' , #acs or decennial census
                      cache = TRUE) # Load all the ACS variables for the 5-year ACS from 2017-2021

View(v18) #Will bring up the dataframe with all the ACS variables for the dataset we pulled. Useful reference



############################
# Ethnic Minority (%)
############################


## Ethnic Minority
totPopEthnicity <- "B03002_001"
totWhiteOnlynotHisp <- "B03002_003"

Qminority <- get_acs(geography = 'block group', 
                     variables = c(totPopEthnicity,totWhiteOnlynotHisp), 
                     state = "CT", #state abbreviations
                     county = "Fairfield", #county level
                     place = "Bridgeport",
                     year = 2021,
                     output = "wide") #choice between long or wide



colnames(Qminority) <- c("GEOID","NAME","totPopEthnic_E","totPopEthnic_M","totWhiteOnly_E","totWhiteOnly_M")
Qminority$totMinority_E <- Qminority$totPopEthnic_E - Qminority$totWhiteOnly_E


## Cutter et al changed estimates of 0 to 1 for calculations to work.
#Full citation: Cutter, S. L., Boruff, B. J., & Shirley, W. L. (2003). Social Vulnerability to Environmental Hazards n. In 699Social Science Quarterly (Vol. 84). https://doi.org/10.1111/1540-6237.8402002


Qminority$totPopEthnic_E[Qminority$totPopEthnic_E== 0] <- 1
Qminority$totWhiteOnly_E[Qminority$totWhiteOnly_E == 0] <- 1
Qminority$totMinority_E[Qminority$totMinority_E == 0] <- 1


Qminority$Qminority_E <- (Qminority$totMinority_E / Qminority$totPopEthnic_E)*100
Qminority$Qminority_p <- Qminority$totMinority_E / Qminority$totPopEthnic_E
Qminority$totMinority_SE <- sqrt((Qminority$totPopEthnic_M/1.645)^2 + (Qminority$totWhiteOnly_M/1.645)^2)
Qminority$totPopEthnic_SE <- Qminority$totPopEthnic_M/1.645

Qminority$SEp_first_sqrt <- (Qminority$totMinority_SE^2) - ((Qminority$Qminority_p^2)*(Qminority$totPopEthnic_SE^2))
Qminority$Qminority_SE <- NA

#Function to estimate error for the ACS assessments
for(x in 1:dim(Qminority)[1]){
  if(Qminority$Qminority_p[x] == 1){
    Qminority$Qminority_SE[x] <- (Qminority$totMinority_SE[x] / Qminority$totPopEthnic_E[x])*100}
  if(Qminority$Qminority_p[x] != 1 & Qminority$SEp_first_sqrt[x] < 0){
    Qminority$Qminority_SE[x] <- (sqrt((Qminority$totMinority_SE[x]^2) + ((Qminority$Qminority_p[x]^2)*(Qminority$totPopEthnic_SE[x]^2)))/Qminority$totPopEthnic_E[x])*100}
  if(Qminority$Qminority_p[x] != 1 & Qminority$SEp_first_sqrt[x] > 0){
    Qminority$Qminority_SE[x] <- (sqrt((Qminority$totMinority_SE[x]^2) - ((Qminority$Qminority_p[x]^2)*(Qminority$totPopEthnic_SE[x]^2)))/Qminority$totPopEthnic_E[x])*100}
}

Qminority$Qminority_CV <- (Qminority$Qminority_SE / Qminority$Qminority_E)*100
## Create a new data frame with the same number of rows

output.df.fipsedited <- merge(output.df.fipsedited,Qminority[,c("GEOID","Qminority_E","Qminority_SE","Qminority_CV")],
                   by="GEOID")

############################
# Below Poverty line (%)
############################

## < Poverty line
## ACS Concept (ACS Table B17021): Poverty Status of Individuals in the Past 12 Months by Living Arrangement
## ACS Variable: B17021_001 = Total Population (individual), B17021_002 = Total Pop with income below poverty level

totPopPoverty <- "B17021_001"
totBelowPoverty <- "B17021_002"

Qpoverty <- get_acs(geography = 'block group',
                    variables = c(totPopPoverty,totBelowPoverty),
                    state = "CT", #state abbreviations
                    county = "Fairfield", #county level
                    place = "Bridgeport",
                    year = 2021,
                    output = "wide") #choice between long or wide


#Qpoverty <- Qpoverty[Qpoverty$GEOID %in% region_bg_ID,]


colnames(Qpoverty) <- c("GEOID","NAME","totPopPoverty_E","totPopPoverty_M","totBelowPoverty_E","totBelowPoverty_M")

## Cutter et al changed estimates of 0 to 1 for calculations to work.
Qpoverty$totPopPoverty_E[Qpoverty$totPopPoverty_E == 0] <- 1
Qpoverty$totBelowPoverty_E[Qpoverty$totBelowPoverty_E == 0] <- 1

Qpoverty$Qpoverty_E <- (Qpoverty$totBelowPoverty_E / Qpoverty$totPopPoverty_E)*100
Qpoverty$Qpoverty_p <- Qpoverty$totBelowPoverty_E / Qpoverty$totPopPoverty_E

Qpoverty$totBelowPoverty_SE <- Qpoverty$totBelowPoverty_M/1.645
Qpoverty$totPopPoverty_SE <- Qpoverty$totPopPoverty_M/1.645


Qpoverty$SEp_first_sqrt <- (Qpoverty$totBelowPoverty_SE^2) - ((Qpoverty$Qpoverty_p^2)*(Qpoverty$totPopPoverty_SE^2))
Qpoverty$Qpoverty_SE <- NA

#Function to estimate error
for(x in 1:dim(Qpoverty)[1]){
  if(Qpoverty$Qpoverty_p[x] == 1){
    Qpoverty$Qpoverty_SE[x] <- (Qpoverty$totBelowPoverty_SE[x] / Qpoverty$totPopPoverty_E[x])*100}
  if(Qpoverty$Qpoverty_p[x] != 1 & Qpoverty$SEp_first_sqrt[x] < 0){
    Qpoverty$Qpoverty_SE[x] <- (sqrt((Qpoverty$totBelowPoverty_SE[x]^2) + ((Qpoverty$Qpoverty_p[x]^2)*(Qpoverty$totPopPoverty_SE[x]^2)))/Qpoverty$totPopPoverty_E[x])*100}
  if(Qpoverty$Qpoverty_p[x] != 1 & Qpoverty$SEp_first_sqrt[x] > 0){
    Qpoverty$Qpoverty_SE[x] <- (sqrt((Qpoverty$totBelowPoverty_SE[x]^2) - ((Qpoverty$Qpoverty_p[x]^2)*(Qpoverty$totPopPoverty_SE[x]^2)))/Qpoverty$totPopPoverty_E[x])*100}
}

Qpoverty$Qpoverty_CV <- (Qpoverty$Qpoverty_SE / Qpoverty$Qpoverty_E)*100
output.df.fipsedited <- merge(output.df.fipsedited,Qpoverty[,c("GEOID","Qpoverty_E","Qpoverty_SE","Qpoverty_CV")],
                   by="GEOID")

############################
# Adults without a high school diploma (%)
############################

## No HS diploma
## Census Concept: Educational Attainment for the Population 25 Years and Over (Census Table B15003)

totPopEdu <- "B15003_001"
QNoHSDip_IDs <- c("B15003_002","B15003_003","B15003_004","B15003_005","B15003_006","B15003_007","B15003_008","B15003_009",
                  "B15003_010","B15003_011","B15003_012","B15003_013","B15003_014","B15003_015","B15003_016")

v18_QNoHSDip <- v18[v18$name %in% c(totPopEdu,QNoHSDip_IDs),]
QNoHSDip <- get_acs(geography = "block group", 
                    variables = c(totPopEdu,QNoHSDip_IDs), 
                    state = "CT", #state abbreviations
                    county = "Fairfield", #county level
                    place = "Bridgeport",
                    year = 2021,
                    output = "wide") #choice between long or wide

##QNoHSDip <- QNoHSDip[QNoHSDip$GEOID %in% region_bg_ID,]

QNoHSDip$totNoHSDip_E <- apply(QNoHSDip[,c(paste0(QNoHSDip_IDs,"E"))],1,sum)


## Cutter et al changed estimates of 0 to 1 for calculations to work. 
QNoHSDip$B15003_001E[QNoHSDip$B15003_001E == 0] <- 1
QNoHSDip$totNoHSDip_E[QNoHSDip$totNoHSDip_E == 0] <- 1

## Cutter et al changed NA MOE values to 0 for calculations to work.

QNoHSDip$QNoHSDip_E <- (QNoHSDip$totNoHSDip_E/QNoHSDip$B15003_001E)*100
QNoHSDip_MIDs <- subset(colnames(QNoHSDip), grepl("^.+(M)$", colnames(QNoHSDip))) #This creates a vector to subset the data by the grepl function
QNoHSDip[QNoHSDip_MIDs ][is.na(QNoHSDip[QNoHSDip_MIDs])] <- 0 #this uses the subset vector created above to make any NAs it found to be 0. 
summary(QNoHSDip[QNoHSDip_MIDs]) # Check to make sure there are no NAs in the MOE estimates

colnames(QNoHSDip)[colnames(QNoHSDip) == c("B15003_001E","B15003_001M")] <- c("totPopEdu_E","totPopEdu_M")

## Estimating Standard Error according to Census
## Source: https://www2.census.gov/programs-surveys/acs/tech_docs/statistical_testing/2016StatisticalTesting5year.pdf?#
## 
## p = sumQNoHSDip_IDs / B01003_001E
## totPop_SE = totPop_M / 1.645
## totNoHSDip_SE = sqrt(SE(B15002_003M)^2 + SE(B15002_004M)^2 + ... SE(B15002_026M))

## SE(p) = (1/totPop_E) * sqrt((totNoHSDip_SE^2) - (p^2 * (totPop_SE^2)))
## If the value under the sqrt is negative then use the following equation to calculate SE instead.
## SE(p) = (1/totPop_E) * sqrt((totNoHSDip_SE^2) + (p^2 * (totPop_SE^2)))
## If p = 1 then use the following to calculate SE 
## SE(p) = totNoHSDip_SE / totPop_E


QNoHSDip$QNoHSDip_p <- QNoHSDip$totNoHSDip_E/QNoHSDip$totPopEdu_E
QNoHSDip$totPopEdu_SE <- QNoHSDip$totPopEdu_M / 1.645
QNoHSDip$totNoHSDip_SE <- sqrt((QNoHSDip$B15003_002M/1.645)^2 + (QNoHSDip$B15003_003M/1.645)^2 + (QNoHSDip$B15003_004M/1.645)^2 + (QNoHSDip$B15003_005M/1.645)^2 + (QNoHSDip$B15003_006M/1.645)^2 + (QNoHSDip$B15003_007M/1.645)^2 + (QNoHSDip$B15003_008M/1.645)^2 + (QNoHSDip$B15003_009M/1.645)^2 + (QNoHSDip$B15003_010M/1.645)^2 + (QNoHSDip$B15003_011M/1.645)^2 + (QNoHSDip$B15003_012M/1.645)^2 + (QNoHSDip$B15003_013M/1.645)^2 + (QNoHSDip$B15003_014M/1.645)^2 + (QNoHSDip$B15003_015M/1.645)^2 + (QNoHSDip$B15003_016M/1.645)^2)

QNoHSDip$SEp_first_sqrt <- (QNoHSDip$totNoHSDip_SE^2) - ((QNoHSDip$QNoHSDip_p^2)*(QNoHSDip$totPopEdu_SE^2))
QNoHSDip$QNoHSDip_SE <- NA

for(x in 1:dim(QNoHSDip)[1]){
  if(QNoHSDip$QNoHSDip_p[x] == 1){
    QNoHSDip$QNoHSDip_SE[x] <- (QNoHSDip$totNoHSDip_SE[x] / QNoHSDip$totPopEdu_E[x])*100}
  if(QNoHSDip$QNoHSDip_p[x] != 1 & QNoHSDip$SEp_first_sqrt[x] < 0){
    QNoHSDip$QNoHSDip_SE[x] <- (sqrt((QNoHSDip$totNoHSDip_SE[x]^2) + ((QNoHSDip$QNoHSDip_p[x]^2)*(QNoHSDip$totPopEdu_SE[x]^2)))/QNoHSDip$totPopEdu_E[x])*100}
  if(QNoHSDip$QNoHSDip_p[x] != 1 & QNoHSDip$SEp_first_sqrt[x] > 0){
    QNoHSDip$QNoHSDip_SE[x] <- (sqrt((QNoHSDip$totNoHSDip_SE[x]^2) - ((QNoHSDip$QNoHSDip_p[x]^2)*(QNoHSDip$totPopEdu_SE[x]^2)))/QNoHSDip$totPopEdu_E[x])*100}
}

QNoHSDip$QNoHSDip_CV <- (QNoHSDip$QNoHSDip_SE / QNoHSDip$QNoHSDip_E)*100
output.df.fipsedited <- merge(output.df.fipsedited,QNoHSDip[,c("GEOID","QNoHSDip_E","QNoHSDip_SE","QNoHSDip_CV")],
                   by="GEOID")



############################################
# Percentage of Pre-1980 Built Structures (%)
############################################

## Pre-1980 built structures
## ACS Concept (ACS Table B25034): Year Structure Built
## ACS Variable: B25034_001 = Total, B25034_002 = Built 1939 or earlier, B25034_003 = Built 1940 to 1949,
##               B25034_004 = Built 1950 to 1959, B25034_005 = Built 1960 to 1969, B25034_006 = Built 1970 to 1979

totalStructures <- "B25034_001"
pre1980Structures <- c("B25034_002", "B25034_003", "B25034_004", "B25034_005", "B25034_006")

Qpre1980Structures <- get_acs(geography = 'block group',
                              variables = c(totalStructures, pre1980Structures),
                              state = "CT", #state abbreviations
                              county = "Fairfield", #county level
                              place = "Bridgeport",
                              year = 2021,
                              output = "wide") #choice between long or wide

##Qpre1980Structures <- Qpre1980Structures[Qpre1980Structures$GEOID %in% region_bg_ID,]
colnames(Qpre1980Structures) <- c("GEOID","NAME", "totalStructures_E", paste0(pre1980Structures, "_E"), "totalStructures_M", paste0(pre1980Structures, "_M"))

Qpre1980Structures$totalStructures_E[Qpre1980Structures$totalStructures_E == 0] <- 1

Qpre1980Structures$pre1980_E <- rowSums(Qpre1980Structures[,paste0(pre1980Structures, "_E")])
Qpre1980Structures$pre1980_p <- Qpre1980Structures$pre1980_E / Qpre1980Structures$totalStructures_E

Qpre1980Structures$totalStructures_SE <- Qpre1980Structures$totalStructures_M/1.645
Qpre1980Structures$pre1980_SE <- sqrt(rowSums(Qpre1980Structures[,paste0(pre1980Structures, "_M")]))/1.645

Qpre1980Structures$SEp_first_sqrt <- (Qpre1980Structures$pre1980_SE^2) - ((Qpre1980Structures$pre1980_p^2)*(Qpre1980Structures$totalStructures_SE^2))
Qpre1980Structures$pre1980_SE_final <- NA

#Function to estimate error
for(x in 1:dim(Qpre1980Structures)[1]){
  if(Qpre1980Structures$pre1980_p[x] == 1){
    Qpre1980Structures$pre1980_SE_final[x] <- (Qpre1980Structures$pre1980_SE[x] / Qpre1980Structures$totalStructures_E[x])*100}
  if(Qpre1980Structures$pre1980_p[x] != 1 & Qpre1980Structures$SEp_first_sqrt[x] < 0){
    Qpre1980Structures$pre1980_SE_final[x] <- (sqrt((Qpre1980Structures$pre1980_SE[x]^2) + ((Qpre1980Structures$pre1980_p[x]^2)*(Qpre1980Structures$totalStructures_SE[x]^2)))/Qpre1980Structures$totalStructures_E[x])*100}
  if(Qpre1980Structures$pre1980_p[x] != 1 & Qpre1980Structures$SEp_first_sqrt[x] > 0){
    Qpre1980Structures$pre1980_SE_final[x] <- (sqrt((Qpre1980Structures$pre1980_SE[x]^2) - ((Qpre1980Structures$pre1980_p[x]^2)*(Qpre1980Structures$totalStructures_SE[x]^2)))/Qpre1980Structures$totalStructures_E[x])*100}
}


Qpre1980Structures$pre1980_CV <- (Qpre1980Structures$pre1980_SE_final / Qpre1980Structures$pre1980_p)*100
output.df.fipsedited <- merge(output.df.fipsedited, Qpre1980Structures[,c("GEOID","pre1980_E","pre1980_SE","pre1980_CV")], by="GEOID")




# Percentage of Residents Without Vehicle Access (%)
###################################################

## Residents without vehicle access
## ACS Concept (ACS Table B25044): TENURE BY VEHICLES AVAILABLE
## ACS Variable: B25044_001 = Total
##               B25044_003 = Estimate Total: Owner occupied: No vehicle available
##               B25044_010 = Estimate Total: Renter occupied: No vehicle available

totalHouseholds <- "B25044_001"
noVehicleHouseholds <- c("B25044_003", "B25044_010")

QnoVehicleAccess <- get_acs(geography = 'block group',
                            variables = c(totalHouseholds, noVehicleHouseholds),
                            state = "CT", #state abbreviations
                            county = "Fairfield", #county level
                            place = "Bridgeport",
                            year = 2021,
                            output = "wide") #choice between long or wide

#QnoVehicleAccess <- QnoVehicleAccess[QnoVehicleAccess$GEOID %in% region_bg_ID,]
colnames(QnoVehicleAccess) <- c("GEOID","NAME", "totalHouseholds_E", paste0(noVehicleHouseholds, "_E"), "totalHouseholds_M", paste0(noVehicleHouseholds, "_M"))

QnoVehicleAccess$totalHouseholds_E[QnoVehicleAccess$totalHouseholds_E == 0] <- 1

QnoVehicleAccess$noVehicleHouseholds_E <- rowSums(QnoVehicleAccess[,paste0(noVehicleHouseholds, "_E")])
QnoVehicleAccess$noVehicleHouseholds_p <- QnoVehicleAccess$noVehicleHouseholds_E / QnoVehicleAccess$totalHouseholds_E

QnoVehicleAccess$totalHouseholds_SE <- QnoVehicleAccess$totalHouseholds_M/1.645
QnoVehicleAccess$noVehicleHouseholds_SE <- sqrt(rowSums(QnoVehicleAccess[,paste0(noVehicleHouseholds, "_M")]))/1.645

QnoVehicleAccess$SEp_first_sqrt <- (QnoVehicleAccess$noVehicleHouseholds_SE^2) - ((QnoVehicleAccess$noVehicleHouseholds_p^2)*(QnoVehicleAccess$totalHouseholds_SE^2))
QnoVehicleAccess$noVehicleHouseholds_SE_final <- NA

#Function to estimate error
for(x in 1:dim(QnoVehicleAccess)[1]){
  if(QnoVehicleAccess$noVehicleHouseholds_p[x] == 1){
    QnoVehicleAccess$noVehicleHouseholds_SE_final[x] <- (QnoVehicleAccess$noVehicleHouseholds_SE[x] / QnoVehicleAccess$totalHouseholds_E[x])*100}
  if(QnoVehicleAccess$noVehicleHouseholds_p[x] != 1 & QnoVehicleAccess$SEp_first_sqrt[x] < 0){
    QnoVehicleAccess$noVehicleHouseholds_SE_final[x] <- (sqrt((QnoVehicleAccess$noVehicleHouseholds_SE[x]^2) + ((QnoVehicleAccess$noVehicleHouseholds_p[x]^2)*(QnoVehicleAccess$totalHouseholds_SE[x]^2)))/QnoVehicleAccess$totalHouseholds_E[x])*100}
  if(QnoVehicleAccess$noVehicleHouseholds_p[x] != 1 & QnoVehicleAccess$SEp_first_sqrt[x] > 0){
    QnoVehicleAccess$noVehicleHouseholds_SE_final[x] <- (sqrt((QnoVehicleAccess$noVehicleHouseholds_SE[x]^2) - ((QnoVehicleAccess$noVehicleHouseholds_p[x]^2)*(QnoVehicleAccess$totalHouseholds_SE[x]^2)))/QnoVehicleAccess$totalHouseholds_E[x])*100}
}

QnoVehicleAccess$noVehicleHouseholds_CV <- (QnoVehicleAccess$noVehicleHouseholds_SE_final / QnoVehicleAccess$noVehicleHouseholds_p)*100
output.df.fipsedited <- merge(output.df.fipsedited, QnoVehicleAccess[,c("GEOID","noVehicleHouseholds_E","noVehicleHouseholds_SE","noVehicleHouseholds_CV")], by="GEOID")


#######################################
# Percentage of Elderly Population (%)
#######################################

## Elderly population
## ACS Concept (ACS Table B11006): HOUSEHOLD TYPE BY AGE OF HOUSEHOLDER
## ACS Variable: B11006_001 = Total, B11006_002 = Households with one or more people 60 years and over
##

totalHouseholds <- "B11006_001"
elderlyHouseholds <- "B11006_002"

Qelderly <- get_acs(geography = 'block group',
                    variables = c(totalHouseholds, elderlyHouseholds),
                    state = "CT", #state abbreviations
                    county = "Fairfield", #county level
                    place = "Bridgeport",
                    year = 2021,
                    output = "wide") #choice between long or wide

#Qelderly <- Qelderly[Qelderly$GEOID %in% region_bg_ID,]

colnames(Qelderly) <- c("GEOID","NAME", "totalHouseholds_E", paste0(elderlyHouseholds, "_E"), "totalHouseholds_M", paste0(elderlyHouseholds, "_M"))

Qelderly$totalHouseholds_E[Qelderly$totalHouseholds_E == 0] <- 1

Qelderly$elderlyHouseholds_E <- rowSums(Qelderly[,paste0(elderlyHouseholds, "_E")])
Qelderly$elderly_p <- Qelderly$elderlyHouseholds_E / Qelderly$totalHouseholds_E

Qelderly$totalHouseholds_SE <- Qelderly$totalHouseholds_M/1.645
Qelderly$elderly_SE <- sqrt(rowSums(Qelderly[,paste0(elderlyHouseholds, "_M")]))/1.645

Qelderly$SEp_first_sqrt <- (Qelderly$elderly_SE^2) - ((Qelderly$elderly_p^2)*(Qelderly$totalHouseholds_SE^2))
Qelderly$elderly_SE_final <- NA

#Function to estimate error
for(x in 1:dim(Qelderly)[1]){
  if(Qelderly$elderly_p[x] == 1){
    Qelderly$elderly_SE_final[x] <- (Qelderly$elderly_SE[x] / Qelderly$totalHouseholds_E[x])*100}
  if(Qelderly$elderly_p[x] != 1 & Qelderly$SEp_first_sqrt[x] < 0){
    Qelderly$elderly_SE_final[x] <- (sqrt((Qelderly$elderly_SE[x]^2) + ((Qelderly$elderly_p[x]^2)*(Qelderly$totalHouseholds_SE[x]^2)))/Qelderly$totalHouseholds_E[x])*100}
  if(Qelderly$elderly_p[x] != 1 & Qelderly$SEp_first_sqrt[x] > 0){
    Qelderly$elderly_SE_final[x] <- (sqrt((Qelderly$elderly_SE[x]^2) - ((Qelderly$elderly_p[x]^2)*(Qelderly$totalHouseholds_SE[x]^2)))/Qelderly$totalHouseholds_E[x])*100}
}

Qelderly$elderly_CV <- (Qelderly$elderly_SE_final / Qelderly$elderly_p)*100
output.df.fipsedited <- merge(output.df.fipsedited, Qelderly[,c("GEOID","elderlyHouseholds_E","elderly_SE","elderly_CV")], by="GEOID")




###########################################
# Percentage of Population with Disability (%)
###########################################

## Population with disability
## ACS Concept (ACS Table C21007): AGE BY DISABILITY STATUS
## ACS Variable: C21007_001 = Total, C21007_002 = Under 18 years, C21007_003 = 18 to 34 years,
##               C21007_004 = 35 to 64 years, C21007_005 = 65 to 74 years, C21007_006 = 75 years and over,
##               C21007_007 = With a disability, C21007_008 = Under 18 years with a disability, C21007_009 = 18 to 34 years with a disability,
##               C21007_010 = 35 to 64 years with a disability, C21007_011 = 65 to 74 years with a disability, C21007_012 = 75 years and over with a disability

totalPopulation <- "C21007_001"
populationWithDisability <- c("C21007_007", "C21007_008", "C21007_009", "C21007_010", "C21007_011", "C21007_012")

Qdisability <- get_acs(geography = 'block group',
                       variables = c(totalPopulation, populationWithDisability),
                       state = "CT", #state abbreviations
                       county = "Fairfield", #county level
                       place = "Bridgeport",
                       year = 2021,
                       output = "wide") #choice between long or wide

#Qdisability <- Qdisability[Qdisability$GEOID %in% region_bg_ID,]
colnames(Qdisability) <- c("GEOID","NAME", "totalPopulation_E", paste0(populationWithDisability, "_E"), "totalPopulation_M", paste0(populationWithDisability, "_M"))

Qdisability$totalPopulation_E[Qdisability$totalPopulation_E == 0] <- 1

Qdisability$populationWithDisability_E <- rowSums(Qdisability[,paste0(populationWithDisability, "_E")])
Qdisability$disability_p <- Qdisability$populationWithDisability_E / Qdisability$totalPopulation_E

Qdisability$totalPopulation_SE <- Qdisability$totalPopulation_M/1.645
Qdisability$disability_SE <- sqrt(rowSums(Qdisability[,paste0(populationWithDisability, "_M")]))/1.645

Qdisability$SEp_first_sqrt <- (Qdisability$disability_SE^2) - ((Qdisability$disability_p^2)*(Qdisability$totalPopulation_SE^2))
Qdisability$disability_SE_final <- NA

#Function to estimate error
for(x in 1:dim(Qdisability)[1]){
  if(Qdisability$disability_p[x] == 1){
    Qdisability$disability_SE_final[x] <- (Qdisability$disability_SE[x] / Qdisability$totalPopulation_E[x])*100}
  if(Qdisability$disability_p[x] != 1 & Qdisability$SEp_first_sqrt[x] < 0){
    Qdisability$disability_SE_final[x] <- (sqrt((Qdisability$disability_SE[x]^2) + ((Qdisability$disability_p[x]^2)*(Qdisability$totalPopulation_SE[x]^2)))/Qdisability$totalPopulation_E[x])*100}
  if(Qdisability$disability_p[x] != 1 & Qdisability$SEp_first_sqrt[x] > 0){
    Qdisability$disability_SE_final[x] <- (sqrt((Qdisability$disability_SE[x]^2) - ((Qdisability$disability_p[x]^2)*(Qdisability$totalPopulation_SE[x]^2)))/Qdisability$totalPopulation_E[x])*100}
}

Qdisability$disability_CV <- (Qdisability$disability_SE_final / Qdisability$disability_p)*100
output.df.fipsedited <- merge(output.df.fipsedited, Qdisability[,c("GEOID","populationWithDisability_E","disability_SE","disability_CV")], by="GEOID")





############################
# 65 years old of age and living alone (%)
############################

## >= 65 years of age & living alone
## ACS Concept: Relationship By Household Type (Including Living Alone) For The Population 65 Years and Over (ACS Table B09020)
## ACS Variable: Female Over 64 Living Alone = 09020_018, Male Over 64 Living Alone = B09020_015, Total Population (By Sex Category) = B01001_001
totPopbySex <- "B01001_001"
totLivingAloneOver64_IDs <- c("B09020_015","B09020_018")

QseniorAlone <- get_acs(geography = 'block group', 
                        variables = c(totPopbySex,totLivingAloneOver64_IDs), 
                        state = "CT", #state abbreviations
                        county = "Fairfield", #county level
                        place = "Bridgeport",
                        year = 2021,
                        output = "wide") #choice between long or wide


#QseniorAlone <- QseniorAlone[QseniorAlone$GEOID %in% region_bg_ID,]


QseniorAlone$totLivingAloneOver64_E <- apply(QseniorAlone[,c(paste0(totLivingAloneOver64_IDs,"E"))],1,sum)


## Cutter et al changed estimates of 0 to 1 for calculations to work. 
QseniorAlone$B01001_001E[QseniorAlone$B01001_001E== 0] <- 1
QseniorAlone$totLivingAloneOver64_E[QseniorAlone$totLivingAloneOver64_E == 0] <- 1

## Cutter et al changed NA MOE values to 0 for calculations to work.

QseniorAlone$QseniorAlone_E <- (QseniorAlone$totLivingAloneOver64_E/QseniorAlone$B01001_001E)*100
QseniorAlone_MIDs <- subset(colnames(QseniorAlone), grepl("^.+(M)$", colnames(QseniorAlone)))
QseniorAlone[QseniorAlone_MIDs][is.na(QseniorAlone[QseniorAlone_MIDs])] <- 0
summary(QseniorAlone[QseniorAlone_MIDs]) # Check to make sure there are no NAs in the MOE estimates

colnames(QseniorAlone)[colnames(QseniorAlone) == c("B01001_001E","B01001_001M")] <- c("totPopbySex_E","totPopbySex_M")

## Estimating Standard Error according to Census
## Source: https://www2.census.gov/programs-surveys/acs/tech_docs/statistical_testing/2016StatisticalTesting5year.pdf?#
## 
## p = sumQseniorAlone_IDs / B01003_001E
## totPop_SE = totPop_M / 1.645
## totLivingAloneOver64_SE = sqrt(SE(B15002_003M)^2 + SE(B15002_004M)^2 + ... SE(B15002_026M))

## SE(p) = (1/totPop_E) * sqrt((totLivingAloneOver64_SE^2) - (p^2 * (totPop_SE^2)))
## If the value under the sqrt is negative then use the following equation to calculate SE instead.
## SE(p) = (1/totPop_E) * sqrt((totLivingAloneOver64_SE^2) + (p^2 * (totPop_SE^2)))
## If p = 1 then use the following to calculate SE 
## SE(p) = totLivingAloneOver64_SE / totPop_E


QseniorAlone$QseniorAlone_p <- QseniorAlone$totLivingAloneOver64_E/QseniorAlone$totPopbySex_E
QseniorAlone$totPopbySex_SE <- QseniorAlone$totPopbySex_M / 1.645
QseniorAlone$totLivingAloneOver64_SE <- sqrt((QseniorAlone$B09020_015M/1.645)^2 + (QseniorAlone$B09020_018M/1.645)^2) 

QseniorAlone$SEp_first_sqrt <- (QseniorAlone$totLivingAloneOver64_SE^2) - ((QseniorAlone$QseniorAlone_p^2)*(QseniorAlone$totPopbySex_SE^2))
QseniorAlone$QseniorAlone_SE <- NA

for(x in 1:dim(QseniorAlone)[1]){
  if(QseniorAlone$QseniorAlone_p[x] == 1){
    QseniorAlone$QseniorAlone_SE[x] <- (QseniorAlone$totLivingAloneOver64_SE[x] / QseniorAlone$totPopbySex_E[x])*100}
  if(QseniorAlone$QseniorAlone_p[x] != 1 & QseniorAlone$SEp_first_sqrt[x] < 0){
    QseniorAlone$QseniorAlone_SE[x] <- (sqrt((QseniorAlone$totLivingAloneOver64_SE[x]^2) + ((QseniorAlone$QseniorAlone_p[x]^2)*(QseniorAlone$totPopbySex_SE[x]^2)))/QseniorAlone$totPopbySex_E[x])*100}
  if(QseniorAlone$QseniorAlone_p[x] != 1 & QseniorAlone$SEp_first_sqrt[x] > 0){
    QseniorAlone$QseniorAlone_SE[x] <- (sqrt((QseniorAlone$totLivingAloneOver64_SE[x]^2) - ((QseniorAlone$QseniorAlone_p[x]^2)*(QseniorAlone$totPopbySex_SE[x]^2)))/QseniorAlone$totPopbySex_E[x])*100}
}

QseniorAlone$QseniorAlone_CV <- (QseniorAlone$QseniorAlone_SE / QseniorAlone$QseniorAlone_E)*100
output.df.fipsedited <- merge(output.df.fipsedited,QseniorAlone[,c("GEOID","QseniorAlone_E","QseniorAlone_SE","QseniorAlone_CV")],by="GEOID")


############################
# Quality Control and Outputs
############################

## Select and remove rows with NA
output.na <- which(is.na(output.df.fipsedited), arr.ind = TRUE)
unique.output.na <- unique(output.na[,1])
output.GEOID.rm <- output.df.fipsedited[unique.output.na,]$GEOID
output.nonas <- output.df.fipsedited[!(output.df.fipsedited$GEOID %in% output.GEOID.rm), ]



## Seperate CV and E columns
output.CV <- output.nonas %>%  dplyr::select(-ends_with("_E"))
output.CV <- output.CV %>% dplyr::select(-ends_with("_SE"))

output.E <- output.nonas %>% dplyr::select(-ends_with("_CV"))
output.E <- output.E %>% dplyr::select(-ends_with("_SE"))


## Write out new csv files to local machine
write_csv(output.nonas, paste("C:/Users/charc/OneDrive/Desktop/PCABridgeport/BridgeportPCA2/MA_Spring2024/R_Scripts/Output_R/TMP_UHEAT_CENSUS_VARIABLES", year, type, "CT_ALLVariables_ALLMetrics", paste(Sys.Date(),".csv",sep=""),sep = "_"))
write_csv(output.CV,paste("C:/Users/charc/OneDrive/Desktop/PCABridgeport/BridgeportPCA2/MA_Spring2024/R_Scripts/Output_R/TMP_UHEAT_CENSUS_VARIABLES", year, type, "CT_ALLVariables_CV", paste(Sys.Date(),".csv",sep=""),sep = "_"))
write_csv(output.E, paste("C:/Users/charc/OneDrive/Desktop/PCABridgeport/BridgeportPCA2/MA_Spring2024/R_Scripts/Output_R/TMP_UHEAT_CENSUS_VARIABLES", year, type, "CT_ALLVariables_E", paste(Sys.Date(),".csv",sep=""),sep = "_"))
